"use client";

import { zodResolver } from "@hookform/resolvers/zod";
import { useForm } from "react-hook-form";
import { z } from "zod";
import { Button } from "@/components/ui/button";
import {
  Form,
  FormControl,
  FormDescription,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from "@/components/ui/card";
import { useState } from "react";
import { FileText, Download, Loader2 } from "lucide-react";
import { useToast } from "@/hooks/use-toast";
import { Popover, PopoverTrigger, PopoverContent } from "@/components/ui/popover";
import { Calendar } from "@/components/ui/calendar";
import { CalendarIcon } from "lucide-react";
import { format } from "date-fns";
import { cn } from "@/lib/utils";

const formSchema = z.object({
  organizerName: z.string().min(2, { message: "Organizer name is required." }),
  artistName: z.string().min(2, { message: "Artist name is required." }),
  eventName: z.string().min(3, { message: "Event name is required." }),
  eventDate: z.date({ required_error: "Event date is required." }),
  eventLocation: z.string().min(3, { message: "Event location is required." }),
  scopeOfWork: z.string().min(10, { message: "Scope of work is required." }),
  paymentAmount: z.string().regex(/^\$?\d+(,\d{3})*(\.\d{2})?$/, { message: "Invalid payment amount format (e.g., $1,000 or 1000.00)." }),
  paymentTerms: z.string().min(5, { message: "Payment terms are required." }),
});

type ContractFormValues = z.infer<typeof formSchema>;

export default function ContractGeneratorForm() {
  const [generatedContract, setGeneratedContract] = useState<string | null>(null);
  const [isLoading, setIsLoading] = useState(false);
  const { toast } = useToast();

  const form = useForm<ContractFormValues>({
    resolver: zodResolver(formSchema),
    defaultValues: {
      organizerName: "",
      artistName: "",
      eventName: "",
      eventDate: undefined,
      eventLocation: "",
      scopeOfWork: "",
      paymentAmount: "",
      paymentTerms: "50% upfront, 50% upon completion.",
    },
  });

  function generateContractText(values: ContractFormValues): string {
    return `
# Performance Agreement

**Date of Agreement:** ${format(new Date(), "PPP")}

**Between:**

1.  **The Organizer:**
    Name: ${values.organizerName}
    (Hereinafter referred to as the "Organizer")

2.  **The Artist:**
    Name: ${values.artistName}
    (Hereinafter referred to as the "Artist")

Collectively referred to as the "Parties".

**1. Event Details:**
   - Event Name: ${values.eventName}
   - Event Date: ${format(values.eventDate, "PPP")}
   - Event Location: ${values.eventLocation}

**2. Scope of Work:**
   The Artist agrees to perform for the Organizer at the event detailed above. The performance shall consist of:
   ${values.scopeOfWork}

**3. Payment:**
   - Total Payment: ${values.paymentAmount}
   - Payment Terms: ${values.paymentTerms}

**4. Cancellation:**
   [Specify cancellation terms, e.g., If the Organizer cancels the event less than X days prior, Y% of the fee is due. If the Artist cancels, Z.]

**5. Technical Requirements:**
   [Specify any technical requirements, e.g., The Organizer will provide sound system, lighting, etc. The Artist will provide their own instruments.]

**6. Confidentiality:**
   Both parties agree to keep the terms of this agreement confidential.

**7. Governing Law:**
   This agreement shall be governed by the laws of [Specify Jurisdiction].

**Signatures:**

_________________________
${values.organizerName} (Organizer)

_________________________
${values.artistName} (Artist)

---
*Disclaimer: This is a sample template generated by MaestroAI. It is not legal advice. Consult with a legal professional for any formal agreements.*
    `;
  }

  async function onSubmit(values: ContractFormValues) {
    setIsLoading(true);
    setGeneratedContract(null);
    // Simulate processing
    await new Promise(resolve => setTimeout(resolve, 500));
    const contractText = generateContractText(values);
    setGeneratedContract(contractText);
    toast({
      title: "Contract Template Generated",
      description: "A draft contract has been created based on your input.",
    });
    setIsLoading(false);
  }

  const handleDownload = () => {
    if (!generatedContract) return;
    const blob = new Blob([generatedContract], { type: 'text/plain;charset=utf-8' });
    const link = document.createElement('a');
    link.href = URL.createObjectURL(blob);
    link.download = `Contract_${form.getValues("eventName").replace(/\s+/g, '_')}.txt`;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    URL.revokeObjectURL(link.href);
  };

  return (
    <>
      <Form {...form}>
        <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-8">
          <div className="grid md:grid-cols-2 gap-6">
            <FormField control={form.control} name="organizerName" render={({ field }) => (
              <FormItem><FormLabel>Organizer Name</FormLabel><FormControl><Input placeholder="Your Name / Company" {...field} /></FormControl><FormMessage /></FormItem>
            )} />
            <FormField control={form.control} name="artistName" render={({ field }) => (
              <FormItem><FormLabel>Artist Name</FormLabel><FormControl><Input placeholder="Artist's Name" {...field} /></FormControl><FormMessage /></FormItem>
            )} />
          </div>
          <div className="grid md:grid-cols-3 gap-6">
            <FormField control={form.control} name="eventName" render={({ field }) => (
              <FormItem><FormLabel>Event Name</FormLabel><FormControl><Input placeholder="Event Title" {...field} /></FormControl><FormMessage /></FormItem>
            )} />
             <FormField control={form.control} name="eventDate" render={({ field }) => (
              <FormItem className="flex flex-col"><FormLabel>Event Date</FormLabel><Popover>
                  <PopoverTrigger asChild><FormControl><Button variant={"outline"} className={cn("w-full justify-start text-left font-normal",!field.value && "text-muted-foreground")}>
                        <CalendarIcon className="mr-2 h-4 w-4" />
                        {field.value ? format(field.value, "PPP") : <span>Pick event date</span>}
                      </Button></FormControl></PopoverTrigger>
                  <PopoverContent className="w-auto p-0" align="start"><Calendar mode="single" selected={field.value} onSelect={field.onChange} initialFocus /></PopoverContent>
                </Popover><FormMessage /></FormItem>
            )} />
            <FormField control={form.control} name="eventLocation" render={({ field }) => (
              <FormItem><FormLabel>Event Location</FormLabel><FormControl><Input placeholder="Venue Address" {...field} /></FormControl><FormMessage /></FormItem>
            )} />
          </div>
          <FormField control={form.control} name="scopeOfWork" render={({ field }) => (
            <FormItem><FormLabel>Scope of Work / Performance Details</FormLabel><FormControl><Textarea placeholder="e.g., 2-hour DJ set, 3x45 minute acoustic sessions..." {...field} rows={4} /></FormControl><FormMessage /></FormItem>
          )} />
          <div className="grid md:grid-cols-2 gap-6">
            <FormField control={form.control} name="paymentAmount" render={({ field }) => (
              <FormItem><FormLabel>Payment Amount</FormLabel><FormControl><Input placeholder="$1000" {...field} /></FormControl><FormMessage /></FormItem>
            )} />
            <FormField control={form.control} name="paymentTerms" render={({ field }) => (
              <FormItem><FormLabel>Payment Terms</FormLabel><FormControl><Input placeholder="e.g., 50% upfront, 50% on completion" {...field} /></FormControl><FormMessage /></FormItem>
            )} />
          </div>
          <Button type="submit" disabled={isLoading}>
            {isLoading ? <Loader2 className="mr-2 h-4 w-4 animate-spin" /> : <FileText className="mr-2 h-4 w-4" />}
            Generate Contract Template
          </Button>
        </form>
      </Form>

      {generatedContract && (
        <Card className="mt-8">
          <CardHeader className="flex flex-row items-center justify-between">
            <div>
              <CardTitle className="font-headline">Generated Contract Template</CardTitle>
              <CardDescription>Review the template below. You can copy or download it.</CardDescription>
            </div>
            <Button onClick={handleDownload} variant="outline">
              <Download className="mr-2 h-4 w-4" /> Download (.txt)
            </Button>
          </CardHeader>
          <CardContent>
            <Textarea value={generatedContract} readOnly rows={20} className="font-code text-sm bg-muted/30" />
            <p className="mt-4 text-xs text-muted-foreground">
              Disclaimer: This is a sample template generated by MaestroAI. It is not legal advice. Consult with a legal professional for any formal agreements.
            </p>
          </CardContent>
        </Card>
      )}
    </>
  );
}
