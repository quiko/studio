rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    //============================================================
    // Rules for the Users collection
    //============================================================
    match /users/{userId} {
      
      // An authenticated user can read their own profile
      allow read: if request.auth != null && request.auth.uid == userId;

      // An authenticated user can read the profiles of users with the 'artist' role
      allow read: if request.auth != null && resource.data.role == 'artist';

      // A user can only create their own document during sign-up
      allow create: if request.auth != null
                    && request.auth.uid == userId
                    && request.resource.data.email == request.auth.token.email
                    && request.resource.data.role in ['artist', 'organizer'];

      // A user can only update their own document
      allow update: if request.auth != null && request.auth.uid == userId;
    }

    //============================================================
    // Rules for the Contracts collection
    //============================================================
    match /contracts/{contractId} {
      
      // Only an 'organizer' can create a contract
      allow create: if request.auth != null
                    && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'organizer';

      // Only the organizer and the artist involved can read the contract
      allow read: if request.auth != null
                  && (request.auth.uid == resource.data.organizerId || request.auth.uid == resource.data.artistId);
      
      // The artist or organizer can sign the contract (but not "un-sign" it)
      allow update: if request.auth != null && (
                      (request.auth.uid == resource.data.organizerId &&
                       request.resource.data.signedByOrganizer == true && resource.data.signedByOrganizer == false) ||
                      (request.auth.uid == resource.data.artistId &&
                       request.resource.data.signedByArtist == true && resource.data.signedByArtist == false)
                    );
    }

    //============================================================
    // Rules for the Conversations collection and its Messages subcollection
    //============================================================
    match /conversations/{conversationId} {

      // A user can create a conversation if they are one of the two participants
      allow create: if request.auth != null
                    && request.resource.data.participants.hasAny([request.auth.uid])
                    && request.resource.data.participants.size() == 2;

      // Only participants of the conversation can read its data
      allow read: if request.auth != null
                  && resource.data.participants.hasAny([request.auth.uid]);

      // Only participants can update the conversation
      allow update: if request.auth != null
                    && resource.data.participants.hasAny([request.auth.uid]);

      // Deleting conversations is forbidden
      allow delete: if false;

      //------------------------------------------------------------
      // Rules for the Messages subcollection
      //------------------------------------------------------------
      match /messages/{messageId} {

        // Participants of the parent conversation can read messages
        allow read: if request.auth != null
                    && get(/databases/$(database)/documents/conversations/$(conversationId)).data.participants.hasAny([request.auth.uid]);

        // A participant can create a message if the senderId is their own
        allow create: if request.auth != null
                      && get(/databases/$(database)/documents/conversations/$(conversationId)).data.participants.hasAny([request.auth.uid])
                      && request.resource.data.senderId == request.auth.uid
                      && request.resource.data.isRead == false;

        // A participant can update a message ONLY to mark it as read
        allow update: if request.auth != null
                      && get(/databases/$(database)/documents/conversations/$(conversationId)).data.participants.hasAny([request.auth.uid])
                      && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['isRead'])
                      && resource.data.isRead == false
                      && request.resource.data.isRead == true;

        // Deleting messages is forbidden
        allow delete: if false;
      }
    }
    
    //============================================================
    // Rules for the Events collection (CORRECTED)
    //============================================================
    match /events/{eventId} {
      // Any authenticated user can read events
      allow read: if request.auth != null;

      // Allows organizers to create events
      allow create: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'organizer';

      // Allows the event's organizer to update or delete it
      allow update, delete: if request.auth != null && request.auth.uid == resource.data.organizerId;
    }
  }
}