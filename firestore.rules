
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Users collection:
    // - Authenticated users can read any user's profile (e.g., for artist discovery/suggestions).
    // - Users can create their own profile document when they sign up.
    // - Users can update their own profile document.
    match /users/{userId} {
      allow read: if request.auth != null;
      allow create: if request.auth.uid == userId;
      allow update: if request.auth.uid == userId;
      allow delete: if false; // Generally safer to disallow deletes initially
    }

    // Conversations collection:
    // - Users can create a conversation if they are one of the participants listed in the new conversation.
    // - Users can read or update a conversation (e.g., last message, unread counts) if they are a participant.
    match /conversations/{conversationId} {
      allow create: if request.auth.uid in request.resource.data.participants;
      allow read, update: if request.auth.uid in resource.data.participants;
      allow delete: if false; // Deleting conversations can be complex, disallow for now

      // Messages subcollection within a conversation:
      // - Users can create a message (send) if their UID matches the senderId in the message
      //   and they are a participant in the parent conversation.
      // - Users can read messages if they are a participant in the parent conversation.
      match /messages/{messageId} {
        allow create: if request.auth.uid == request.resource.data.senderId &&
                       request.auth.uid in get(/databases/$(database)/documents/conversations/$(conversationId)).data.participants;
        allow read: if request.auth.uid in get(/databases/$(database)/documents/conversations/$(conversationId)).data.participants;
        allow update, delete: if false; // Disallow editing/deleting individual messages for simplicity
      }
    }

    // Events collection (assuming events have an 'organizerId' field matching the creator's UID)
    // Note: Your current EventItem type and addEvent logic in UserContext use localStorage.
    // These rules are for if/when events are moved to Firestore.
    match /events/{eventId} {
      allow read: if request.auth != null; // Allow any authenticated user to read event details.
      // Assumes event documents will have an 'organizerId' field.
      allow create: if request.auth.uid == request.resource.data.organizerId;
      allow update, delete: if request.auth.uid == resource.data.organizerId;
    }

    // Contracts collection (assuming contracts have 'organizerId' and 'artistId' fields)
    match /contracts/{contractId} {
      // Users can read a contract if they are the organizer or the artist involved.
      allow read: if request.auth.uid == resource.data.organizerId || request.auth.uid == resource.data.artistId;
      // Organizers can create contracts.
      allow create: if request.auth.uid == request.resource.data.organizerId;
      // Either the organizer or the artist can update a contract (e.g., to change status, sign it).
      allow update: if request.auth.uid == resource.data.organizerId || request.auth.uid == resource.data.artistId;
      // Organizer can delete a contract only if it's in 'draft' status.
      allow delete: if request.auth.uid == resource.data.organizerId && resource.data.status == "draft";
    }
  }
}
